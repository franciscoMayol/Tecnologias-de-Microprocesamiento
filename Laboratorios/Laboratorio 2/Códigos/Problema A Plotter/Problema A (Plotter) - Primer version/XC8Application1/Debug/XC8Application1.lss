
XC8Application1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000374  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000080  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  000003a3  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  000003b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f27  00000000  00000000  00000459  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000076c  00000000  00000000  00001380  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004d4  00000000  00000000  00001aec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000014c  00000000  00000000  00001fc0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000212  00000000  00000000  0000210c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000026a  00000000  00000000  0000231e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  00002588  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000002f2  000002f2  00000366  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002620  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.UART_init 00000016  00000298  00000298  0000030c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.UART_sendChar 0000000e  000002d6  000002d6  0000034a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.UART_sendString 0000002c  0000026c  0000026c  000002e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.UART_receiveChar 0000000e  000002e4  000002e4  00000358  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .progmemx.data 00000134  00000080  00000080  000000f4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 19 .text.mostrarMenu 00000048  00000224  00000224  00000298  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.seleccionarFigura 00000070  000001b4  000001b4  00000228  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.main    00000012  000002c4  000002c4  00000338  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.__dummy_fini 00000002  000002fa  000002fa  0000036e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.__dummy_funcs_on_exit 00000002  000002fc  000002fc  00000370  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.__dummy_simulator_exit 00000002  000002fe  000002fe  00000372  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.exit    00000016  000002ae  000002ae  00000322  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text._Exit   00000004  000002f6  000002f6  0000036a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
   8:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
   c:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
  10:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
  14:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
  18:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
  1c:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
  20:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
  24:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
  28:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
  2c:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
  30:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
  34:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
  38:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
  3c:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
  40:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
  44:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
  48:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
  4c:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
  50:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
  54:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
  58:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
  5c:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
  60:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
  64:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 62 01 	call	0x2c4	; 0x2c4 <main>
  78:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <exit>

0000007c <_exit>:
  7c:	f8 94       	cli

0000007e <__stop_program>:
  7e:	ff cf       	rjmp	.-2      	; 0x7e <__stop_program>

Disassembly of section .text:

000002f2 <__bad_interrupt>:
 2f2:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.UART_init:

00000298 <UART_init>:
	}
}

// Inicializar UART
void UART_init(unsigned int ubrr){
	UBRR0H = (unsigned char)(ubrr >> 8);
 298:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;
 29c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0); // Habilitar recepción y transmisión
 2a0:	88 e1       	ldi	r24, 0x18	; 24
 2a2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00); // Configurar 8 bits de datos
 2a6:	86 e0       	ldi	r24, 0x06	; 6
 2a8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 2ac:	08 95       	ret

Disassembly of section .text.UART_sendChar:

000002d6 <UART_sendChar>:
}

// Enviar un carácter por UART
void UART_sendChar(char data){
	while(!(UCSR0A & (1 << UDRE0))); // Esperar a que el registro esté listo
 2d6:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 2da:	95 ff       	sbrs	r25, 5
 2dc:	fc cf       	rjmp	.-8      	; 0x2d6 <UART_sendChar>
	UDR0 = data; // Enviar el dato
 2de:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 2e2:	08 95       	ret

Disassembly of section .text.UART_sendString:

0000026c <UART_sendString>:
}

// Enviar una cadena de caracteres por UART
void UART_sendString(const char *str){
 26c:	cf 92       	push	r12
 26e:	df 92       	push	r13
 270:	ef 92       	push	r14
 272:	6b 01       	movw	r12, r22
 274:	e8 2e       	mov	r14, r24
	while(*str){
 276:	06 c0       	rjmp	.+12     	; 0x284 <UART_sendString+0x18>
		UART_sendChar(*str++);
 278:	9f ef       	ldi	r25, 0xFF	; 255
 27a:	c9 1a       	sub	r12, r25
 27c:	d9 0a       	sbc	r13, r25
 27e:	e9 0a       	sbc	r14, r25
 280:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <UART_sendChar>
	UDR0 = data; // Enviar el dato
}

// Enviar una cadena de caracteres por UART
void UART_sendString(const char *str){
	while(*str){
 284:	f6 01       	movw	r30, r12
 286:	84 91       	lpm	r24, Z
 288:	e7 fc       	sbrc	r14, 7
 28a:	80 81       	ld	r24, Z
 28c:	81 11       	cpse	r24, r1
 28e:	f4 cf       	rjmp	.-24     	; 0x278 <UART_sendString+0xc>
		UART_sendChar(*str++);
	}
}
 290:	ef 90       	pop	r14
 292:	df 90       	pop	r13
 294:	cf 90       	pop	r12
 296:	08 95       	ret

Disassembly of section .text.UART_receiveChar:

000002e4 <UART_receiveChar>:

// Recibir un carácter por UART
char UART_receiveChar(void){
	while(!(UCSR0A & (1 << RXC0))); // Esperar a que llegue un dato
 2e4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 2e8:	88 23       	and	r24, r24
 2ea:	e4 f7       	brge	.-8      	; 0x2e4 <UART_receiveChar>
	return UDR0; // Retornar el dato recibido
 2ec:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
 2f0:	08 95       	ret

Disassembly of section .text.mostrarMenu:

00000224 <mostrarMenu>:

// Mostrar el menú 
void mostrarMenu(void){
	UART_sendString("\n--- Menu de Figuras ---\n");
 224:	60 e8       	ldi	r22, 0x80	; 128
 226:	70 e0       	ldi	r23, 0x00	; 0
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	0e 94 36 01 	call	0x26c	; 0x26c <UART_sendString>
	UART_sendString("1. Dibujar Circulo\n");
 22e:	6a e9       	ldi	r22, 0x9A	; 154
 230:	70 e0       	ldi	r23, 0x00	; 0
 232:	80 e0       	ldi	r24, 0x00	; 0
 234:	0e 94 36 01 	call	0x26c	; 0x26c <UART_sendString>
	UART_sendString("2. Dibujar Triangulo\n");
 238:	6e ea       	ldi	r22, 0xAE	; 174
 23a:	70 e0       	ldi	r23, 0x00	; 0
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	0e 94 36 01 	call	0x26c	; 0x26c <UART_sendString>
	UART_sendString("3. Dibujar Cruz\n");
 242:	64 ec       	ldi	r22, 0xC4	; 196
 244:	70 e0       	ldi	r23, 0x00	; 0
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	0e 94 36 01 	call	0x26c	; 0x26c <UART_sendString>
	UART_sendString("4. Dibujar Perro\n");
 24c:	65 ed       	ldi	r22, 0xD5	; 213
 24e:	70 e0       	ldi	r23, 0x00	; 0
 250:	80 e0       	ldi	r24, 0x00	; 0
 252:	0e 94 36 01 	call	0x26c	; 0x26c <UART_sendString>
	UART_sendString("5. Dibujar Manzana\n");
 256:	67 ee       	ldi	r22, 0xE7	; 231
 258:	70 e0       	ldi	r23, 0x00	; 0
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	0e 94 36 01 	call	0x26c	; 0x26c <UART_sendString>
	UART_sendString("Seleccione una opcion (1-5): ");
 260:	6b ef       	ldi	r22, 0xFB	; 251
 262:	70 e0       	ldi	r23, 0x00	; 0
 264:	80 e0       	ldi	r24, 0x00	; 0
 266:	0e 94 36 01 	call	0x26c	; 0x26c <UART_sendString>
 26a:	08 95       	ret

Disassembly of section .text.seleccionarFigura:

000001b4 <seleccionarFigura>:
}

// Seleccionar figura según la entrada del usuario
void seleccionarFigura(void){
 1b4:	cf 93       	push	r28
	char opcion = UART_receiveChar(); // Leer opción del usuario
 1b6:	0e 94 72 01 	call	0x2e4	; 0x2e4 <UART_receiveChar>
 1ba:	c8 2f       	mov	r28, r24
	UART_sendChar(opcion); 
 1bc:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <UART_sendChar>

	switch(opcion) {
 1c0:	c3 33       	cpi	r28, 0x33	; 51
 1c2:	b9 f0       	breq	.+46     	; 0x1f2 <seleccionarFigura+0x3e>
 1c4:	28 f4       	brcc	.+10     	; 0x1d0 <seleccionarFigura+0x1c>
 1c6:	c1 33       	cpi	r28, 0x31	; 49
 1c8:	41 f0       	breq	.+16     	; 0x1da <seleccionarFigura+0x26>
 1ca:	c2 33       	cpi	r28, 0x32	; 50
 1cc:	61 f0       	breq	.+24     	; 0x1e6 <seleccionarFigura+0x32>
 1ce:	23 c0       	rjmp	.+70     	; 0x216 <seleccionarFigura+0x62>
 1d0:	c4 33       	cpi	r28, 0x34	; 52
 1d2:	a9 f0       	breq	.+42     	; 0x1fe <seleccionarFigura+0x4a>
 1d4:	c5 33       	cpi	r28, 0x35	; 53
 1d6:	c9 f0       	breq	.+50     	; 0x20a <seleccionarFigura+0x56>
 1d8:	1e c0       	rjmp	.+60     	; 0x216 <seleccionarFigura+0x62>
		case '1':
		UART_sendString("\nSeleccionado: Circulo\n");
 1da:	69 e1       	ldi	r22, 0x19	; 25
 1dc:	71 e0       	ldi	r23, 0x01	; 1
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	0e 94 36 01 	call	0x26c	; 0x26c <UART_sendString>
		
		
		break;
 1e4:	1d c0       	rjmp	.+58     	; 0x220 <seleccionarFigura+0x6c>
		case '2':
		UART_sendString("\nSeleccionado: Triangulo\n");
 1e6:	61 e3       	ldi	r22, 0x31	; 49
 1e8:	71 e0       	ldi	r23, 0x01	; 1
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	0e 94 36 01 	call	0x26c	; 0x26c <UART_sendString>
		
		
		break;
 1f0:	17 c0       	rjmp	.+46     	; 0x220 <seleccionarFigura+0x6c>
		case '3':
		UART_sendString("\nSeleccionado: Cruz\n");
 1f2:	6b e4       	ldi	r22, 0x4B	; 75
 1f4:	71 e0       	ldi	r23, 0x01	; 1
 1f6:	80 e0       	ldi	r24, 0x00	; 0
 1f8:	0e 94 36 01 	call	0x26c	; 0x26c <UART_sendString>
		
		
		break;
 1fc:	11 c0       	rjmp	.+34     	; 0x220 <seleccionarFigura+0x6c>
		case '4':
		UART_sendString("\nSeleccionado: Perro\n");
 1fe:	60 e6       	ldi	r22, 0x60	; 96
 200:	71 e0       	ldi	r23, 0x01	; 1
 202:	80 e0       	ldi	r24, 0x00	; 0
 204:	0e 94 36 01 	call	0x26c	; 0x26c <UART_sendString>
		
		
		break;
 208:	0b c0       	rjmp	.+22     	; 0x220 <seleccionarFigura+0x6c>
		case '5':
		UART_sendString("\nSeleccionado: Manzana\n");
 20a:	66 e7       	ldi	r22, 0x76	; 118
 20c:	71 e0       	ldi	r23, 0x01	; 1
 20e:	80 e0       	ldi	r24, 0x00	; 0
 210:	0e 94 36 01 	call	0x26c	; 0x26c <UART_sendString>
		
		
		break;
 214:	05 c0       	rjmp	.+10     	; 0x220 <seleccionarFigura+0x6c>
		default:
		UART_sendString("\nOpcion no valida. Intente de nuevo.\n");
 216:	6e e8       	ldi	r22, 0x8E	; 142
 218:	71 e0       	ldi	r23, 0x01	; 1
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	0e 94 36 01 	call	0x26c	; 0x26c <UART_sendString>
		break;
	}
}
 220:	cf 91       	pop	r28
 222:	08 95       	ret

Disassembly of section .text.main:

000002c4 <main>:
void moverArriba(unsigned int tiempo_ms);
void moverAbajo(unsigned int tiempo_ms);

int main(void){
	
	UART_init(103);
 2c4:	87 e6       	ldi	r24, 0x67	; 103
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	0e 94 4c 01 	call	0x298	; 0x298 <UART_init>
	
	while(1) {
		mostrarMenu();
 2cc:	0e 94 12 01 	call	0x224	; 0x224 <mostrarMenu>
		seleccionarFigura();
 2d0:	0e 94 da 00 	call	0x1b4	; 0x1b4 <seleccionarFigura>
 2d4:	fb cf       	rjmp	.-10     	; 0x2cc <main+0x8>

Disassembly of section .text.__dummy_fini:

000002fa <_fini>:
 2fa:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000002fc <__funcs_on_exit>:
 2fc:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000002fe <__simulator_exit>:
 2fe:	08 95       	ret

Disassembly of section .text.exit:

000002ae <exit>:
 2ae:	ec 01       	movw	r28, r24
 2b0:	0e 94 7e 01 	call	0x2fc	; 0x2fc <__funcs_on_exit>
 2b4:	0e 94 7d 01 	call	0x2fa	; 0x2fa <_fini>
 2b8:	ce 01       	movw	r24, r28
 2ba:	0e 94 7f 01 	call	0x2fe	; 0x2fe <__simulator_exit>
 2be:	ce 01       	movw	r24, r28
 2c0:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_Exit>

Disassembly of section .text._Exit:

000002f6 <_Exit>:
 2f6:	0e 94 3e 00 	call	0x7c	; 0x7c <_exit>
