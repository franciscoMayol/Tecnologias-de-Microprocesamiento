
ProblemaB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001f4  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000080  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000223  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000231  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d62  00000000  00000000  00000291  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000076b  00000000  00000000  00000ff3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000046e  00000000  00000000  0000175e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c8  00000000  00000000  00001bcc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  00001c94  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000206  00000000  00000000  00001e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  000020a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000172  00000172  000001e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000020f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.pwm_init 0000001a  00000116  00000116  0000018a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.pwm_ventilador 00000016  00000130  00000130  000001a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.setupADC 00000022  000000f4  000000f4  00000168  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.UART_init 00000016  00000146  00000146  000001ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.main    00000074  00000080  00000080  000000f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__dummy_fini 00000002  0000017a  0000017a  000001ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.__dummy_funcs_on_exit 00000002  0000017c  0000017c  000001f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.__dummy_simulator_exit 00000002  0000017e  0000017e  000001f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.exit    00000016  0000015c  0000015c  000001d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text._Exit   00000004  00000176  00000176  000001ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
   8:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
   c:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
  10:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
  14:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
  18:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
  1c:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
  20:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
  24:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
  28:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
  2c:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
  30:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
  34:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
  38:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
  3c:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
  40:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
  44:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
  48:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
  4c:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
  50:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
  54:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
  58:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
  5c:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
  60:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
  64:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <_etext>
  78:	0c 94 ae 00 	jmp	0x15c	; 0x15c <exit>

0000007c <_exit>:
  7c:	f8 94       	cli

0000007e <__stop_program>:
  7e:	ff cf       	rjmp	.-2      	; 0x7e <__stop_program>

Disassembly of section .text:

00000172 <__bad_interrupt>:
 172:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.pwm_init:

00000116 <pwm_init>:

	ADCSRA |= (1 << ADSC);							//inicia la conversion

	while(ADCSRA & (1 << ADSC));					//Espera a que termine la conversion
	return ADC;										//Retorna valor digital entre 0 y 1023
}
 116:	82 e8       	ldi	r24, 0x82	; 130
 118:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
 11c:	89 e1       	ldi	r24, 0x19	; 25
 11e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 122:	8f ef       	ldi	r24, 0xFF	; 255
 124:	93 e0       	ldi	r25, 0x03	; 3
 126:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 12a:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 12e:	08 95       	ret

Disassembly of section .text.pwm_ventilador:

00000130 <pwm_ventilador>:
 130:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 134:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 138:	85 b1       	in	r24, 0x05	; 5
 13a:	84 60       	ori	r24, 0x04	; 4
 13c:	85 b9       	out	0x05, r24	; 5
 13e:	85 b1       	in	r24, 0x05	; 5
 140:	87 7f       	andi	r24, 0xF7	; 247
 142:	85 b9       	out	0x05, r24	; 5
 144:	08 95       	ret

Disassembly of section .text.setupADC:

000000f4 <setupADC>:
  f4:	ec e7       	ldi	r30, 0x7C	; 124
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	80 64       	ori	r24, 0x40	; 64
  fc:	80 83       	st	Z, r24
  fe:	80 81       	ld	r24, Z
 100:	8f 7d       	andi	r24, 0xDF	; 223
 102:	80 83       	st	Z, r24
 104:	ea e7       	ldi	r30, 0x7A	; 122
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	86 60       	ori	r24, 0x06	; 6
 10c:	80 83       	st	Z, r24
 10e:	80 81       	ld	r24, Z
 110:	80 68       	ori	r24, 0x80	; 128
 112:	80 83       	st	Z, r24
 114:	08 95       	ret

Disassembly of section .text.UART_init:

00000146 <UART_init>:
/*-----------------------------------------------------------------
                      INICIALIZACIÓN DE UART
--------------------------------------------------------------------*/

void UART_init(unsigned int ubrr){
	UBRR0H = (unsigned char)(ubrr >> 8);
 146:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;
 14a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
 14e:	88 e1       	ldi	r24, 0x18	; 24
 150:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
 154:	86 e0       	ldi	r24, 0x06	; 6
 156:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 15a:	08 95       	ret

Disassembly of section .text.main:

00000080 <main>:

	ADCSRA |= (1 << ADSC);							//inicia la conversion

	while(ADCSRA & (1 << ADSC));					//Espera a que termine la conversion
	return ADC;										//Retorna valor digital entre 0 y 1023
}
  80:	0e 94 7a 00 	call	0xf4	; 0xf4 <setupADC>
  84:	87 e6       	ldi	r24, 0x67	; 103
  86:	90 e0       	ldi	r25, 0x00	; 0
  88:	0e 94 a3 00 	call	0x146	; 0x146 <UART_init>
  8c:	0e 94 8b 00 	call	0x116	; 0x116 <pwm_init>
  90:	8c ef       	ldi	r24, 0xFC	; 252
  92:	8a b9       	out	0x0a, r24	; 10
  94:	8f ef       	ldi	r24, 0xFF	; 255
  96:	84 b9       	out	0x04, r24	; 4
  98:	8b b1       	in	r24, 0x0b	; 11
  9a:	8b 7f       	andi	r24, 0xFB	; 251
  9c:	8b b9       	out	0x0b, r24	; 11
  9e:	85 e5       	ldi	r24, 0x55	; 85
  a0:	91 e0       	ldi	r25, 0x01	; 1
  a2:	0e 94 98 00 	call	0x130	; 0x130 <pwm_ventilador>
  a6:	2a ea       	ldi	r18, 0xAA	; 170
  a8:	36 ee       	ldi	r19, 0xE6	; 230
  aa:	86 e9       	ldi	r24, 0x96	; 150
  ac:	91 e0       	ldi	r25, 0x01	; 1
  ae:	21 50       	subi	r18, 0x01	; 1
  b0:	30 40       	sbci	r19, 0x00	; 0
  b2:	80 40       	sbci	r24, 0x00	; 0
  b4:	90 40       	sbci	r25, 0x00	; 0
  b6:	d9 f7       	brne	.-10     	; 0xae <main+0x2e>
  b8:	00 00       	nop
  ba:	8a ea       	ldi	r24, 0xAA	; 170
  bc:	92 e0       	ldi	r25, 0x02	; 2
  be:	0e 94 98 00 	call	0x130	; 0x130 <pwm_ventilador>
  c2:	2a ea       	ldi	r18, 0xAA	; 170
  c4:	36 ee       	ldi	r19, 0xE6	; 230
  c6:	86 e9       	ldi	r24, 0x96	; 150
  c8:	91 e0       	ldi	r25, 0x01	; 1
  ca:	21 50       	subi	r18, 0x01	; 1
  cc:	30 40       	sbci	r19, 0x00	; 0
  ce:	80 40       	sbci	r24, 0x00	; 0
  d0:	90 40       	sbci	r25, 0x00	; 0
  d2:	d9 f7       	brne	.-10     	; 0xca <main+0x4a>
  d4:	00 00       	nop
  d6:	8f ef       	ldi	r24, 0xFF	; 255
  d8:	93 e0       	ldi	r25, 0x03	; 3
  da:	0e 94 98 00 	call	0x130	; 0x130 <pwm_ventilador>
  de:	2a ea       	ldi	r18, 0xAA	; 170
  e0:	36 ee       	ldi	r19, 0xE6	; 230
  e2:	86 e9       	ldi	r24, 0x96	; 150
  e4:	91 e0       	ldi	r25, 0x01	; 1
  e6:	21 50       	subi	r18, 0x01	; 1
  e8:	30 40       	sbci	r19, 0x00	; 0
  ea:	80 40       	sbci	r24, 0x00	; 0
  ec:	90 40       	sbci	r25, 0x00	; 0
  ee:	d9 f7       	brne	.-10     	; 0xe6 <main+0x66>
  f0:	00 00       	nop
  f2:	d2 cf       	rjmp	.-92     	; 0x98 <main+0x18>

Disassembly of section .text.__dummy_fini:

0000017a <_fini>:
 17a:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

0000017c <__funcs_on_exit>:
 17c:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

0000017e <__simulator_exit>:
 17e:	08 95       	ret

Disassembly of section .text.exit:

0000015c <exit>:
 15c:	ec 01       	movw	r28, r24
 15e:	0e 94 be 00 	call	0x17c	; 0x17c <__funcs_on_exit>
 162:	0e 94 bd 00 	call	0x17a	; 0x17a <_fini>
 166:	ce 01       	movw	r24, r28
 168:	0e 94 bf 00 	call	0x17e	; 0x17e <__simulator_exit>
 16c:	ce 01       	movw	r24, r28
 16e:	0e 94 bb 00 	call	0x176	; 0x176 <_Exit>

Disassembly of section .text._Exit:

00000176 <_Exit>:
 176:	0e 94 3e 00 	call	0x7c	; 0x7c <_exit>
