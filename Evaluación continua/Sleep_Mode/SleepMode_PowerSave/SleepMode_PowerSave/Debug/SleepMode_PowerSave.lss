
SleepMode_PowerSave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000202  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000202  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000231  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  0000023f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008e2  00000000  00000000  0000026f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000639  00000000  00000000  00000b51  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000025a  00000000  00000000  0000118a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  000013e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  0000143c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000049  00000000  00000000  00001644  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  0000168d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000160  00000160  000001f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000016b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.init_watchdog 00000016  00000134  00000134  000001c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.__vector_6 0000004c  000000c2  000000c2  00000156  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.main    00000026  0000010e  0000010e  000001a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .bss.conteo_dog 00000002  00800100  00800100  00000202  2**0
                  ALLOC
 18 .text.__dummy_fini 00000002  00000168  00000168  000001fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__dummy_funcs_on_exit 00000002  0000016a  0000016a  000001fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.__dummy_simulator_exit 00000002  0000016c  0000016c  00000200  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.exit    00000016  0000014a  0000014a  000001de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text._Exit   00000004  00000164  00000164  000001f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 37 00 	jmp	0x6e	; 0x6e <__ctors_end>
   4:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
   8:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
   c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  10:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  14:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  18:	0c 94 61 00 	jmp	0xc2	; 0xc2 <_etext>
  1c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  20:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  24:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  28:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  2c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  30:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  34:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  38:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  3c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  40:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  44:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  48:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  4c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  50:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  54:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  58:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  5c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  60:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  64:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 02       	muls	r16, r17
  6c:	80 00       	.word	0x0080	; ????

0000006e <__ctors_end>:
  6e:	11 24       	eor	r1, r1
  70:	1f be       	out	0x3f, r1	; 63
  72:	cf ef       	ldi	r28, 0xFF	; 255
  74:	d8 e0       	ldi	r29, 0x08	; 8
  76:	de bf       	out	0x3e, r29	; 62
  78:	cd bf       	out	0x3d, r28	; 61

0000007a <__do_copy_data>:
  7a:	e8 e6       	ldi	r30, 0x68	; 104
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	40 e0       	ldi	r20, 0x00	; 0
  80:	17 c0       	rjmp	.+46     	; 0xb0 <__do_clear_bss+0x8>
  82:	b5 91       	lpm	r27, Z+
  84:	a5 91       	lpm	r26, Z+
  86:	35 91       	lpm	r19, Z+
  88:	25 91       	lpm	r18, Z+
  8a:	05 91       	lpm	r16, Z+
  8c:	07 fd       	sbrc	r16, 7
  8e:	0c c0       	rjmp	.+24     	; 0xa8 <__do_clear_bss>
  90:	95 91       	lpm	r25, Z+
  92:	85 91       	lpm	r24, Z+
  94:	ef 01       	movw	r28, r30
  96:	f9 2f       	mov	r31, r25
  98:	e8 2f       	mov	r30, r24
  9a:	05 90       	lpm	r0, Z+
  9c:	0d 92       	st	X+, r0
  9e:	a2 17       	cp	r26, r18
  a0:	b3 07       	cpc	r27, r19
  a2:	d9 f7       	brne	.-10     	; 0x9a <__do_copy_data+0x20>
  a4:	fe 01       	movw	r30, r28
  a6:	04 c0       	rjmp	.+8      	; 0xb0 <__do_clear_bss+0x8>

000000a8 <__do_clear_bss>:
  a8:	1d 92       	st	X+, r1
  aa:	a2 17       	cp	r26, r18
  ac:	b3 07       	cpc	r27, r19
  ae:	e1 f7       	brne	.-8      	; 0xa8 <__do_clear_bss>
  b0:	ed 36       	cpi	r30, 0x6D	; 109
  b2:	f4 07       	cpc	r31, r20
  b4:	31 f7       	brne	.-52     	; 0x82 <__do_copy_data+0x8>
  b6:	0e 94 87 00 	call	0x10e	; 0x10e <main>
  ba:	0c 94 a5 00 	jmp	0x14a	; 0x14a <exit>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>

Disassembly of section .text:

00000160 <__bad_interrupt>:
 160:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.init_watchdog:

00000134 <init_watchdog>:

int conteo_dog = 0;  // Contador para el Watchdog

// Configuración del Watchdog para generar interrupciones
void init_watchdog() {
	cli();															// Deshabilita interrupciones globales
 134:	f8 94       	cli
	__asm__ __volatile__ ("wdr");									// Resetea el WDT
 136:	a8 95       	wdr

	
	WDTCSR |= (1 << WDCE) | (1 << WDE); 
 138:	e0 e6       	ldi	r30, 0x60	; 96
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	88 61       	ori	r24, 0x18	; 24
 140:	80 83       	st	Z, r24
	WDTCSR = (1 << WDIE) | (1 << WDP2) | (1 << WDP1) | (1 << WDP0); // Configuración para timer de 2 segundos
 142:	87 e4       	ldi	r24, 0x47	; 71
 144:	80 83       	st	Z, r24
	sei();															// Habilita interrupciones globales
 146:	78 94       	sei
 148:	08 95       	ret

Disassembly of section .text.__vector_6:

000000c2 <__vector_6>:
}


ISR(WDT_vect) {
  c2:	1f 92       	push	r1
  c4:	0f 92       	push	r0
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	0f 92       	push	r0
  ca:	11 24       	eor	r1, r1
  cc:	8f 93       	push	r24
  ce:	9f 93       	push	r25
	conteo_dog++;
  d0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  d4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  d8:	01 96       	adiw	r24, 0x01	; 1
  da:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  de:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	
	if (conteo_dog >= 15) {			//15 * 2 = 30 seg
  e2:	0f 97       	sbiw	r24, 0x0f	; 15
  e4:	6c f0       	brlt	.+26     	; 0x100 <__vector_6+0x3e>
		conteo_dog = 0;
  e6:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  ea:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		
		if (PORTD & 0xFF) {
  ee:	8b b1       	in	r24, 0x0b	; 11
  f0:	88 23       	and	r24, r24
  f2:	19 f0       	breq	.+6      	; 0xfa <__vector_6+0x38>
			PORTD &= ~0xFF;			// Si los LEDs están prendidos, se apagan
  f4:	8b b1       	in	r24, 0x0b	; 11
  f6:	1b b8       	out	0x0b, r1	; 11
  f8:	03 c0       	rjmp	.+6      	; 0x100 <__vector_6+0x3e>
			} else {
			PORTD |= 0xFF;			// Si los LEDs están apagados, se prenden
  fa:	8b b1       	in	r24, 0x0b	; 11
  fc:	8f ef       	ldi	r24, 0xFF	; 255
  fe:	8b b9       	out	0x0b, r24	; 11
		}
	}
}
 100:	9f 91       	pop	r25
 102:	8f 91       	pop	r24
 104:	0f 90       	pop	r0
 106:	0f be       	out	0x3f, r0	; 63
 108:	0f 90       	pop	r0
 10a:	1f 90       	pop	r1
 10c:	18 95       	reti

Disassembly of section .text.main:

0000010e <main>:

int main(void) {
	
	DDRD |= 0xFF;     
 10e:	8a b1       	in	r24, 0x0a	; 10
 110:	cf ef       	ldi	r28, 0xFF	; 255
 112:	ca b9       	out	0x0a, r28	; 10
	init_watchdog();  
 114:	0e 94 9a 00 	call	0x134	; 0x134 <init_watchdog>

	PORTD |= 0xFF;     
 118:	8b b1       	in	r24, 0x0b	; 11
 11a:	cb b9       	out	0x0b, r28	; 11

	while (1) {
		// Entra en modo "Power-save" hasta que se despierte por el Watchdog
		set_sleep_mode(SLEEP_MODE_PWR_SAVE);
 11c:	83 b7       	in	r24, 0x33	; 51
 11e:	81 7f       	andi	r24, 0xF1	; 241
 120:	86 60       	ori	r24, 0x06	; 6
 122:	83 bf       	out	0x33, r24	; 51
		sleep_enable();
 124:	83 b7       	in	r24, 0x33	; 51
 126:	81 60       	ori	r24, 0x01	; 1
 128:	83 bf       	out	0x33, r24	; 51
		sleep_cpu();				// Entra en modo "Power-save"
 12a:	88 95       	sleep
		sleep_disable();			// Desactiva el modo sleep tras el despertar
 12c:	83 b7       	in	r24, 0x33	; 51
 12e:	8e 7f       	andi	r24, 0xFE	; 254
 130:	83 bf       	out	0x33, r24	; 51
 132:	f4 cf       	rjmp	.-24     	; 0x11c <main+0xe>

Disassembly of section .text.__dummy_fini:

00000168 <_fini>:
 168:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

0000016a <__funcs_on_exit>:
 16a:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

0000016c <__simulator_exit>:
 16c:	08 95       	ret

Disassembly of section .text.exit:

0000014a <exit>:
 14a:	ec 01       	movw	r28, r24
 14c:	0e 94 b5 00 	call	0x16a	; 0x16a <__funcs_on_exit>
 150:	0e 94 b4 00 	call	0x168	; 0x168 <_fini>
 154:	ce 01       	movw	r24, r28
 156:	0e 94 b6 00 	call	0x16c	; 0x16c <__simulator_exit>
 15a:	ce 01       	movw	r24, r28
 15c:	0e 94 b2 00 	call	0x164	; 0x164 <_Exit>

Disassembly of section .text._Exit:

00000164 <_Exit>:
 164:	0e 94 5f 00 	call	0xbe	; 0xbe <_exit>
