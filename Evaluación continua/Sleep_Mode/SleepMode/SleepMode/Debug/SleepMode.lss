
SleepMode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000232  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000232  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000261  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  0000026f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008fe  00000000  00000000  000002a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000639  00000000  00000000  00000ba5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000264  00000000  00000000  000011de  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  00001444  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  000014b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000063  00000000  00000000  000016c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001723  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000190  00000190  00000224  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000174c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.setup   00000036  00000124  00000124  000001b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.enter_sleep_mode 00000016  0000015a  0000015a  000001ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__vector_11 00000062  000000c2  000000c2  00000156  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.main    0000000a  00000186  00000186  0000021a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .bss.conteo   00000002  00800100  00800100  00000232  2**0
                  ALLOC
 19 .text.__dummy_fini 00000002  00000198  00000198  0000022c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.__dummy_funcs_on_exit 00000002  0000019a  0000019a  0000022e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.__dummy_simulator_exit 00000002  0000019c  0000019c  00000230  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.exit    00000016  00000170  00000170  00000204  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text._Exit   00000004  00000194  00000194  00000228  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 37 00 	jmp	0x6e	; 0x6e <__ctors_end>
   4:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
   8:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
   c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
  10:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
  14:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
  18:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
  1c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
  20:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
  24:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
  28:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
  2c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <_etext>
  30:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
  34:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
  38:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
  3c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
  40:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
  44:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
  48:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
  4c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
  50:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
  54:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
  58:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
  5c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
  60:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
  64:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 02       	muls	r16, r17
  6c:	80 00       	.word	0x0080	; ????

0000006e <__ctors_end>:
  6e:	11 24       	eor	r1, r1
  70:	1f be       	out	0x3f, r1	; 63
  72:	cf ef       	ldi	r28, 0xFF	; 255
  74:	d8 e0       	ldi	r29, 0x08	; 8
  76:	de bf       	out	0x3e, r29	; 62
  78:	cd bf       	out	0x3d, r28	; 61

0000007a <__do_copy_data>:
  7a:	e8 e6       	ldi	r30, 0x68	; 104
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	40 e0       	ldi	r20, 0x00	; 0
  80:	17 c0       	rjmp	.+46     	; 0xb0 <__do_clear_bss+0x8>
  82:	b5 91       	lpm	r27, Z+
  84:	a5 91       	lpm	r26, Z+
  86:	35 91       	lpm	r19, Z+
  88:	25 91       	lpm	r18, Z+
  8a:	05 91       	lpm	r16, Z+
  8c:	07 fd       	sbrc	r16, 7
  8e:	0c c0       	rjmp	.+24     	; 0xa8 <__do_clear_bss>
  90:	95 91       	lpm	r25, Z+
  92:	85 91       	lpm	r24, Z+
  94:	ef 01       	movw	r28, r30
  96:	f9 2f       	mov	r31, r25
  98:	e8 2f       	mov	r30, r24
  9a:	05 90       	lpm	r0, Z+
  9c:	0d 92       	st	X+, r0
  9e:	a2 17       	cp	r26, r18
  a0:	b3 07       	cpc	r27, r19
  a2:	d9 f7       	brne	.-10     	; 0x9a <__do_copy_data+0x20>
  a4:	fe 01       	movw	r30, r28
  a6:	04 c0       	rjmp	.+8      	; 0xb0 <__do_clear_bss+0x8>

000000a8 <__do_clear_bss>:
  a8:	1d 92       	st	X+, r1
  aa:	a2 17       	cp	r26, r18
  ac:	b3 07       	cpc	r27, r19
  ae:	e1 f7       	brne	.-8      	; 0xa8 <__do_clear_bss>
  b0:	ed 36       	cpi	r30, 0x6D	; 109
  b2:	f4 07       	cpc	r31, r20
  b4:	31 f7       	brne	.-52     	; 0x82 <__do_copy_data+0x8>
  b6:	0e 94 c3 00 	call	0x186	; 0x186 <main>
  ba:	0c 94 b8 00 	jmp	0x170	; 0x170 <exit>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>

Disassembly of section .text:

00000190 <__bad_interrupt>:
 190:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.setup:

00000124 <setup>:


int conteo = 0;

void setup() {
	DDRD |= 0xFF;  
 124:	8a b1       	in	r24, 0x0a	; 10
 126:	8f ef       	ldi	r24, 0xFF	; 255
 128:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << LED1) | (1 << LED2) | (1 << LED3)| (1 << LED4)| (1 << LED5);  
 12a:	8b b1       	in	r24, 0x0b	; 11
 12c:	8f 61       	ori	r24, 0x1F	; 31
 12e:	8b b9       	out	0x0b, r24	; 11

	// Configurar el Timer 1 para generar interrupciones cada 1 segundo
	TCCR1B |= (1 << WGM12);
 130:	e1 e8       	ldi	r30, 0x81	; 129
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	88 60       	ori	r24, 0x08	; 8
 138:	80 83       	st	Z, r24
	OCR1A = 15624;								// Para 1 segundo de interrupción con prescaler de 1024
 13a:	88 e0       	ldi	r24, 0x08	; 8
 13c:	9d e3       	ldi	r25, 0x3D	; 61
 13e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 142:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TCCR1B |= (1 << CS12) | (1 << CS10);		// Prescaler 1024
 146:	80 81       	ld	r24, Z
 148:	85 60       	ori	r24, 0x05	; 5
 14a:	80 83       	st	Z, r24
	TIMSK1 |= (1 << OCIE1A);					
 14c:	ef e6       	ldi	r30, 0x6F	; 111
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	82 60       	ori	r24, 0x02	; 2
 154:	80 83       	st	Z, r24

	sei();										// Habilitar interrupciones globales
 156:	78 94       	sei
 158:	08 95       	ret

Disassembly of section .text.enter_sleep_mode:

0000015a <enter_sleep_mode>:
}

void enter_sleep_mode() {
	set_sleep_mode(SLEEP_MODE_IDLE);
 15a:	83 b7       	in	r24, 0x33	; 51
 15c:	81 7f       	andi	r24, 0xF1	; 241
 15e:	83 bf       	out	0x33, r24	; 51
	sleep_enable();
 160:	83 b7       	in	r24, 0x33	; 51
 162:	81 60       	ori	r24, 0x01	; 1
 164:	83 bf       	out	0x33, r24	; 51
	sleep_cpu();								// Entrar en modo de reposo
 166:	88 95       	sleep
	sleep_disable();							// Deshabilitar el modo de reposo al despertar
 168:	83 b7       	in	r24, 0x33	; 51
 16a:	8e 7f       	andi	r24, 0xFE	; 254
 16c:	83 bf       	out	0x33, r24	; 51
 16e:	08 95       	ret

Disassembly of section .text.__vector_11:

000000c2 <__vector_11>:
}

ISR(TIMER1_COMPA_vect) {
  c2:	1f 92       	push	r1
  c4:	0f 92       	push	r0
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	0f 92       	push	r0
  ca:	11 24       	eor	r1, r1
  cc:	2f 93       	push	r18
  ce:	3f 93       	push	r19
  d0:	8f 93       	push	r24
  d2:	9f 93       	push	r25
	conteo++;
  d4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  d8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  dc:	9c 01       	movw	r18, r24
  de:	2f 5f       	subi	r18, 0xFF	; 255
  e0:	3f 4f       	sbci	r19, 0xFF	; 255
  e2:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  e6:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>
	if (conteo >= 30 && conteo < 60) {
  ea:	4d 97       	sbiw	r24, 0x1d	; 29
  ec:	4e 97       	sbiw	r24, 0x1e	; 30
  ee:	20 f4       	brcc	.+8      	; 0xf8 <__vector_11+0x36>
		PORTD &= ~((1 << LED1)| (1 << LED2) | (1 << LED3)| (1 << LED4)| (1 << LED5));  // Apagar LEDs 
  f0:	8b b1       	in	r24, 0x0b	; 11
  f2:	80 7e       	andi	r24, 0xE0	; 224
  f4:	8b b9       	out	0x0b, r24	; 11
  f6:	0d c0       	rjmp	.+26     	; 0x112 <__vector_11+0x50>
		} 
	else if (conteo >= 1 && conteo < 30) {
  f8:	21 50       	subi	r18, 0x01	; 1
  fa:	31 09       	sbc	r19, r1
  fc:	2d 31       	cpi	r18, 0x1D	; 29
  fe:	31 05       	cpc	r19, r1
 100:	20 f4       	brcc	.+8      	; 0x10a <__vector_11+0x48>
		PORTD |= ((1 << LED1)| (1 << LED2) | (1 << LED3)| (1 << LED4)| (1 << LED5));  // Prender LEDs
 102:	8b b1       	in	r24, 0x0b	; 11
 104:	8f 61       	ori	r24, 0x1F	; 31
 106:	8b b9       	out	0x0b, r24	; 11
 108:	04 c0       	rjmp	.+8      	; 0x112 <__vector_11+0x50>
		}
	else {
		conteo = 0;				// Reiniciar el contador
 10a:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 10e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
}
 112:	9f 91       	pop	r25
 114:	8f 91       	pop	r24
 116:	3f 91       	pop	r19
 118:	2f 91       	pop	r18
 11a:	0f 90       	pop	r0
 11c:	0f be       	out	0x3f, r0	; 63
 11e:	0f 90       	pop	r0
 120:	1f 90       	pop	r1
 122:	18 95       	reti

Disassembly of section .text.main:

00000186 <main>:

int main(void) {
	setup();
 186:	0e 94 92 00 	call	0x124	; 0x124 <setup>
	while (1) {
		enter_sleep_mode();  
 18a:	0e 94 ad 00 	call	0x15a	; 0x15a <enter_sleep_mode>
 18e:	fd cf       	rjmp	.-6      	; 0x18a <main+0x4>

Disassembly of section .text.__dummy_fini:

00000198 <_fini>:
 198:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

0000019a <__funcs_on_exit>:
 19a:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

0000019c <__simulator_exit>:
 19c:	08 95       	ret

Disassembly of section .text.exit:

00000170 <exit>:
 170:	ec 01       	movw	r28, r24
 172:	0e 94 cd 00 	call	0x19a	; 0x19a <__funcs_on_exit>
 176:	0e 94 cc 00 	call	0x198	; 0x198 <_fini>
 17a:	ce 01       	movw	r24, r28
 17c:	0e 94 ce 00 	call	0x19c	; 0x19c <__simulator_exit>
 180:	ce 01       	movw	r24, r28
 182:	0e 94 ca 00 	call	0x194	; 0x194 <_Exit>

Disassembly of section .text._Exit:

00000194 <_Exit>:
 194:	0e 94 5f 00 	call	0xbe	; 0xbe <_exit>
